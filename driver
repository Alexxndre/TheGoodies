/**
 * Driver class. Uses the CustomerMenu class to display a welcome message to the screen as well as a list of avaiable 
 * products in the vending machine. Prompts the user for a product number that relates to one of the items and allows 
 * the user (customer) to make purchases. Updates inventory after a purchase is made.
 *
 * @author Aaron Munford Alex Borenstain Eric Zhu, GoodiesCo
 * @version 1/29/21 - Java 8
 */
import java.util.Scanner;
public class TheGoodiesDriver
{
    public static void main (String [] args){
        CustomerMenu customer = new CustomerMenu();
        ScannerReadFile data = new ScannerReadFile();
        businessMenu business = new businessMenu();
        data.rawData();
        Scanner scan = new Scanner(System.in);
        Scanner in = new Scanner(System.in);
        String menu;
        String code;
        int totalSale = 0;
        int [] quantRecords = {
            0,0,0,0,0,0
        };
        int quantRecordsNum = 0;
        int [] prodRecords = {
            0,0,0,0,0,0,0
        };
        int prodRecordsNum=0;
        int prodNum, quant;
        int buyAgain;
        System.out.println("Type b for business menu and c for customer menu");
        menu = in.nextLine();
        if (menu.equals("c"))
        {
            
        
        boolean order = true;
        System.out.println(customer.welcomeMenu());
        customer.productList();
        while (order){
            System.out.println("Enter an item number: ");
            prodNum = scan.nextInt();  //user enters item they want to buy
            System.out.println("How many would you like to buy: ");
            quant = scan.nextInt(); //user enters quantity of products bought
            customer.update(prodNum,quant); //messages shown for where the back end will update
            System.out.println("Would you like to buy another item? (1=y/2=n)");
            buyAgain = scan.nextInt(); //user prompted if they want to buy another item
            totalSale = totalSale + quant;
            prodRecords[quantRecordsNum] = quant;
            
            prodRecords[prodRecordsNum] = prodNum;
            if (buyAgain == 2){
                order = false;
                customer.price(); //price is shown, messages shown for where storekeeper profits will be updated
            }
        }
    }
        if (menu.equals("b"))
        {
            System.out.println("enter the code");
            code = in.nextLine();
            if (code.equals("1234"))
            {
                business.productList();
            
            }
        }
    }
}

/**
 * Welcome to Goodies Vending Machine!
What would you like to purchase today?
product name price number
chips 0.75 1 
Pop corn 0.75 2 
Pop Corners 0.75 3 
Cheeze it 0.75 4 
Gold Fish 0.75 5 
Oreo Cookies 0.75 6 
Fruit snack 0.25 7 
Trail Mix 0.5 8 
Nutrigrain 0.5 9 
Peanut bar 0.5 10 
Coke 1.25 11 
Sprite 1.25 12 
Sunkist 1.25 13 
Brisk 1.25 14 
Ginger Ale 1.25 15 
Water 1.0 16 
Capri Sun 0.75 17 
Ice cream 1.0 18 
Klondike Bars 1.25 19 
Italian Ice 1.25 20 
Enter an item number: 
1
How many would you like to buy: 
2
chips was purchased.
2 items were removed from the inventory.
2 sales were added to the sales records for that product.
Would you like to buy another item? (1=y/2=n)
1
Enter an item number: 
2
How many would you like to buy: 
3
Pop corn was purchased.
3 items were removed from the inventory.
3 sales were added to the sales records for that product.
Would you like to buy another item? (1=y/2=n)
2
The total cost is: $3.75
$3.75 has been added to the storekeeper's profit
 */
